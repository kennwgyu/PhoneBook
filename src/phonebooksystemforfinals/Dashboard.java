package phonebooksystemforfinals;

import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;


public class Dashboard extends javax.swing.JFrame {

    
    public Dashboard() {
        initComponents();
        Connect ();
        FetchDashboard();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    
    public void Connect()
{
    try {
            Class.forName("com.mysql.jdbc.Driver");
            con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/phone_book_system", "root", "");
        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect to the database. Please check your connection settings.", "Database Connection Error", JOptionPane.ERROR_MESSAGE);
        }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchbar = new javax.swing.JTextField();
        searchlabel = new javax.swing.JLabel();
        sortbycombo = new javax.swing.JComboBox<>();
        phonebooklogo = new javax.swing.JLabel();
        searchbutton = new javax.swing.JButton();
        deletecontact = new javax.swing.JButton();
        addcontact = new javax.swing.JButton();
        editbutton = new javax.swing.JButton();
        contactslisttable = new javax.swing.JScrollPane();
        contacttables = new javax.swing.JTable();
        contactnumberlabel = new javax.swing.JLabel();
        pnuminfo = new javax.swing.JLabel();
        lnameinfo = new javax.swing.JLabel();
        mnameinfo = new javax.swing.JLabel();
        fnameinfo = new javax.swing.JLabel();
        nnameinfo = new javax.swing.JLabel();
        lnamelabel = new javax.swing.JLabel();
        mnamelabel = new javax.swing.JLabel();
        fnamelabel = new javax.swing.JLabel();
        searchoptions = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        refreshbutton = new javax.swing.JButton();
        defaultpic = new javax.swing.JLabel();
        contactpicture = new javax.swing.JLabel();
        bgpic = new javax.swing.JLabel();
        hiddenid = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1919, 1170));
        setMinimumSize(new java.awt.Dimension(1170, 1919));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchbar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        searchbar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbarActionPerformed(evt);
            }
        });
        getContentPane().add(searchbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 170, 230, 70));

        searchlabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        searchlabel.setText("Search:");
        getContentPane().add(searchlabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 60, 70));

        sortbycombo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        sortbycombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "First Name", "Last Name", "Date Added" }));
        sortbycombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortbycomboActionPerformed(evt);
            }
        });
        getContentPane().add(sortbycombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 170, 150, 70));

        phonebooklogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Phone_book-removebg-preview 2.png"))); // NOI18N
        getContentPane().add(phonebooklogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 420, 130));

        searchbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-search-50.png"))); // NOI18N
        searchbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbuttonActionPerformed(evt);
            }
        });
        getContentPane().add(searchbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 170, 100, 70));

        deletecontact.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-delete-50.png"))); // NOI18N
        deletecontact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletecontactActionPerformed(evt);
            }
        });
        getContentPane().add(deletecontact, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 170, 80, 70));

        addcontact.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-add-administrator-50.png"))); // NOI18N
        addcontact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addcontactActionPerformed(evt);
            }
        });
        getContentPane().add(addcontact, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 170, 70, 70));

        editbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-edit-50.png"))); // NOI18N
        editbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editbuttonActionPerformed(evt);
            }
        });
        getContentPane().add(editbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1820, 30, 80, 80));

        contacttables.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        contacttables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "", "First name", "Middle Name", "Last Name", "Nickname", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        contacttables.setIntercellSpacing(new java.awt.Dimension(5, 5));
        contacttables.setRowHeight(40);
        contacttables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contacttablesMouseClicked(evt);
            }
        });
        contactslisttable.setViewportView(contacttables);
        if (contacttables.getColumnModel().getColumnCount() > 0) {
            contacttables.getColumnModel().getColumn(0).setMinWidth(50);
            contacttables.getColumnModel().getColumn(0).setMaxWidth(50);
            contacttables.getColumnModel().getColumn(1).setMinWidth(150);
            contacttables.getColumnModel().getColumn(1).setMaxWidth(150);
            contacttables.getColumnModel().getColumn(2).setMinWidth(150);
            contacttables.getColumnModel().getColumn(2).setMaxWidth(150);
            contacttables.getColumnModel().getColumn(3).setMinWidth(150);
            contacttables.getColumnModel().getColumn(3).setMaxWidth(150);
            contacttables.getColumnModel().getColumn(4).setMinWidth(150);
            contacttables.getColumnModel().getColumn(4).setMaxWidth(150);
            contacttables.getColumnModel().getColumn(5).setMinWidth(150);
            contacttables.getColumnModel().getColumn(5).setMaxWidth(150);
        }

        getContentPane().add(contactslisttable, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 870, 870));

        contactnumberlabel.setFont(new java.awt.Font("Myanmar Text", 0, 48)); // NOI18N
        contactnumberlabel.setText("Number        :");
        getContentPane().add(contactnumberlabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 1010, 290, 110));

        pnuminfo.setFont(new java.awt.Font("Myanmar Text", 0, 48)); // NOI18N
        pnuminfo.setText("Select a Contact");
        getContentPane().add(pnuminfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1320, 1010, 540, 110));

        lnameinfo.setFont(new java.awt.Font("Myanmar Text", 0, 48)); // NOI18N
        lnameinfo.setText("Select a Contact");
        getContentPane().add(lnameinfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1320, 820, 540, 110));

        mnameinfo.setFont(new java.awt.Font("Myanmar Text", 0, 48)); // NOI18N
        mnameinfo.setText("Select a Contact");
        getContentPane().add(mnameinfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1320, 630, 540, 110));

        fnameinfo.setFont(new java.awt.Font("Myanmar Text", 0, 48)); // NOI18N
        fnameinfo.setText("Select a Contact");
        getContentPane().add(fnameinfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 430, 530, 110));

        nnameinfo.setFont(new java.awt.Font("Myanmar Text", 0, 48)); // NOI18N
        nnameinfo.setText("Select a Contact");
        nnameinfo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(nnameinfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1340, 110, 510, 110));

        lnamelabel.setFont(new java.awt.Font("Myanmar Text", 0, 48)); // NOI18N
        lnamelabel.setText("Lastname      :");
        getContentPane().add(lnamelabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 820, 300, 110));

        mnamelabel.setFont(new java.awt.Font("Myanmar Text", 0, 48)); // NOI18N
        mnamelabel.setText("Middlename  :");
        getContentPane().add(mnamelabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 630, 310, 110));

        fnamelabel.setFont(new java.awt.Font("Myanmar Text", 0, 48)); // NOI18N
        fnamelabel.setText("Firstname      :");
        getContentPane().add(fnamelabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 430, 330, 110));

        searchoptions.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        searchoptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "First Name", "Last Name", "Nickname", "Number" }));
        getContentPane().add(searchoptions, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 170, 120, 70));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Sort by:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 140, 80, 30));

        refreshbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-refresh-50.png"))); // NOI18N
        refreshbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshbuttonActionPerformed(evt);
            }
        });
        getContentPane().add(refreshbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 170, 70, 70));

        defaultpic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/defaultpic.png"))); // NOI18N
        defaultpic.setPreferredSize(new java.awt.Dimension(30, 30));
        getContentPane().add(defaultpic, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 10, 310, 310));
        getContentPane().add(contactpicture, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 10, 310, 310));

        bgpic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bgpic.png"))); // NOI18N
        getContentPane().add(bgpic, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1920, 1170));
        getContentPane().add(hiddenid, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 160, 20, 20));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchbarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbarActionPerformed
        
    }//GEN-LAST:event_searchbarActionPerformed

    private void sortbycomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortbycomboActionPerformed
    String selectedOption = sortbycombo.getSelectedItem().toString(); 

    // Prompt for sorting order
    int sortOrder = JOptionPane.showOptionDialog(this, 
            "Select Sorting Order", 
            "Sort Order", 
            JOptionPane.DEFAULT_OPTION, 
            JOptionPane.INFORMATION_MESSAGE, 
            null, 
            new String[]{"Ascending", "Descending"}, 
            "Ascending");

    if (sortOrder == -1) { 
        return;
    }

    String order = sortOrder == 0 ? "ASC" : "DESC";

    String sortColumn = "";
    switch (selectedOption) {
        case "First Name":
            sortColumn = "fname";
            break;
        case "Last Name":
            sortColumn = "lname"; 
            break;
        case "Date Added":
            sortColumn = "dateandtimeadded";  // Ensure sorting by phone number if needed
            break;
        default:
            JOptionPane.showMessageDialog(this, "Invalid sorting option.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
    }

    // Formulate the query (use only relevant columns)
    String query = "SELECT id, fname, mname, lname, nname, pnum, img FROM userinfo ORDER BY " + sortColumn + " " + order;

    try {
        Connect();  
        pst = con.prepareStatement(query);
        rs = pst.executeQuery();

        // Reset the table model
        DefaultTableModel model = (DefaultTableModel) contacttables.getModel();
        model.setRowCount(0);

        // Populate the table with results
        while (rs.next()) {
            model.addRow(new Object[] {
                rs.getString("id"),
                rs.getString("fname"),
                rs.getString("mname"),
                rs.getString("lname"),
                rs.getString("nname"),
                rs.getString("pnum")  // Only include the phone number
            });
        }

        // Notify if no records are found
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No records found.", "Search Results", JOptionPane.INFORMATION_MESSAGE);
        }

    } catch (SQLException ex) {
        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
        try {
            if (con != null) con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    }//GEN-LAST:event_sortbycomboActionPerformed

    private void addcontactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addcontactActionPerformed
        AddContact newcontact = new AddContact();
        newcontact.setVisible(true);
    }//GEN-LAST:event_addcontactActionPerformed

    private void searchbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbuttonActionPerformed
    String searchText = searchbar.getText().trim(); 
    String selectedOption = searchoptions.getSelectedItem().toString(); 


    if (searchText.isEmpty()) {
        if (searchText.isEmpty()) {
        
        FetchDashboard(); 
        return; 
    }
    }

    Connect();
    try {
    String query = ""; 
    switch (selectedOption) {
        case "First Name":
            query = "SELECT * FROM userinfo WHERE fname LIKE ?";
            pst = con.prepareStatement(query);
            pst.setString(1, "%" + searchText + "%"); 
            break;
        case "Last Name":
            query = "SELECT * FROM userinfo WHERE lname LIKE ?";
            pst = con.prepareStatement(query);
            pst.setString(1, "%" + searchText + "%");
            break;
        case "Nickname":
            query = "SELECT * FROM userinfo WHERE nname LIKE ?";
            pst = con.prepareStatement(query);
            pst.setString(1, "%" + searchText + "%");
            break;
        case "Number":
            query = "SELECT * FROM userinfo WHERE pnum LIKE ?";
            pst = con.prepareStatement(query);
            pst.setString(1, "%" + searchText + "%");
            break;
        case "Default":
            query = "SELECT * FROM userinfo WHERE fname LIKE ? OR lname LIKE ? OR nname LIKE ? OR pnum LIKE ?";
            pst = con.prepareStatement(query);
            pst.setString(1, "%" + searchText + "%");
            pst.setString(2, "%" + searchText + "%");
            pst.setString(3, "%" + searchText + "%");
            pst.setString(4, "%" + searchText + "%");
            break;
        default:
            JOptionPane.showMessageDialog(this, "Invalid search option.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
    }

    rs = pst.executeQuery();

    // Update the table model with the search results
    DefaultTableModel model = (DefaultTableModel) contacttables.getModel();
    model.setRowCount(0); // Clear existing rows

    while (rs.next()) {
        model.addRow(new Object[]{
            rs.getString("fname"),
            rs.getString("mname"),
            rs.getString("lname"),
            rs.getString("nname"),
            rs.getString("pnum")
        });
    }

    if (model.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "No records found.", "Search Results", JOptionPane.INFORMATION_MESSAGE);
    }
} catch (SQLException ex) {
    Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
} finally {
    try {
        if (con != null) con.close();
    } catch (SQLException ex) {
        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
    }
}
    }//GEN-LAST:event_searchbuttonActionPerformed

    private void contacttablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contacttablesMouseClicked
    int selectedRow = contacttables.getSelectedRow();

    // Get the ID from the selected row (assuming the ID is the first column)
    String contactId = contacttables.getValueAt(selectedRow, 0).toString();

    // Get the other details from the selected row
    fnameinfo.setText(contacttables.getValueAt(selectedRow, 1).toString());
    mnameinfo.setText(contacttables.getValueAt(selectedRow, 2).toString());
    lnameinfo.setText(contacttables.getValueAt(selectedRow, 3).toString());
    nnameinfo.setText(contacttables.getValueAt(selectedRow, 4).toString());
    pnuminfo.setText(contacttables.getValueAt(selectedRow, 5).toString());

    // Clear the current picture and reset visibility
    contactpicture.setIcon(null);
    contactpicture.setText("");
    defaultpic.setVisible(true); // Show default picture initially

    try {
        Connect(); // Ensure the database connection is established

        // SQL query to fetch the image using the contact ID
        String sql = "SELECT img FROM userinfo WHERE id = ?";
        pst = con.prepareStatement(sql);
        pst.setString(1, contactId); // Set the ID parameter in the query
        rs = pst.executeQuery();

        if (rs.next()) {
            byte[] imageBytes = rs.getBytes("img"); // Fetch the image byte array
            if (imageBytes != null) {
                // Convert the byte array to an ImageIcon
                ImageIcon imageIcon = new ImageIcon(imageBytes);
                Image image = imageIcon.getImage(); // Convert ImageIcon to Image
                ImageIcon newImageIcon = new ImageIcon(image.getScaledInstance(310, 310, Image.SCALE_SMOOTH)); // Resize the image

                // Set the image icon to the contactpicture label
                contactpicture.setIcon(newImageIcon);
                contactpicture.setText(""); // Clear any placeholder text

                // Hide default picture if an image is available
                defaultpic.setVisible(false);
            } else {
                // If no image is found for this contact, clear the label and show defaultpic
                contactpicture.setIcon(null);
                defaultpic.setVisible(true);
            }
        } else {
            // If no record is found for the contact, clear the label and show defaultpic
            contactpicture.setIcon(null);
            contactpicture.setText("No Image Available");
            defaultpic.setVisible(true);
            JOptionPane.showMessageDialog(this, "No image found for this contact.", "Image Not Found", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (SQLException ex) {
        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
        try {
            if (con != null) con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Table model listener to handle changes and selections/deselections
    contacttables.getModel().addTableModelListener(e -> {
        // Get the row and column where the change occurred
        int row = e.getFirstRow();
        int column = e.getColumn();

        // Check if the change occurred in the checkbox column
        if (column == contacttables.getColumnCount() - 1) {
            // Get the checkbox value
            boolean isSelected = (Boolean) contacttables.getValueAt(row, column);

            // Now you can perform actions based on whether the row was selected or deselected
            if (isSelected) {
                System.out.println("Row " + row + " is selected");
            } else {
                System.out.println("Row " + row + " is deselected");

                // When the row is deselected, set the text of the labels to "Select a contact"
                fnameinfo.setText("Select a contact");
                mnameinfo.setText("Select a contact");
                lnameinfo.setText("Select a contact");
                nnameinfo.setText("Select a contact");
                
                contactpicture.setIcon(null);
                defaultpic.setVisible(true);
            }
        }
    });
    }//GEN-LAST:event_contacttablesMouseClicked

    private void refreshbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshbuttonActionPerformed
        FetchDashboard();
        contactpicture.setIcon(null);
        defaultpic.setVisible(true);
        fnameinfo.setText("Select a contact");
        mnameinfo.setText("Select a contact");
        lnameinfo.setText("Select a contact");
        nnameinfo.setText("Select a contact");
    }//GEN-LAST:event_refreshbuttonActionPerformed

    private void deletecontactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletecontactActionPerformed
        int selectedRow = contacttables.getSelectedRow();
    
        String idToDelete = contacttables.getValueAt(selectedRow, 0).toString();
        if (!idToDelete.isEmpty()) {
            int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this contact?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

            if (confirmation == JOptionPane.YES_OPTION) {
                try {
                    Connect();


                    // Now, delete record from users_info table
                    String deleteInfoQuery = "DELETE FROM userinfo WHERE id=?";
                    PreparedStatement deleteInfoStmt = con.prepareStatement(deleteInfoQuery);
                    deleteInfoStmt.setString(1, idToDelete);
                    int rowsAffectedInfo = deleteInfoStmt.executeUpdate();

                    // Check if both deletions were successful
                    if (rowsAffectedInfo > 0) {
                        JOptionPane.showMessageDialog(this, "Record deleted successfully.", "Deletion Successful", JOptionPane.INFORMATION_MESSAGE);
                        // Refresh the table after deletion
                        fnameinfo.setText("");
                        mnameinfo.setText("");
                        lnameinfo.setText("");
                        nnameinfo.setText("");
                        pnuminfo.setText("");
                        
                        contactpicture.setIcon(null);
                        defaultpic.setVisible(true);
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to delete record.", "Deletion Failed", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        if (con != null) {
                            con.close();
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FetchDashboard();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter an ID to delete.", "Empty ID", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deletecontactActionPerformed

    class MyTableModel extends DefaultTableModel {
    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        DefaultTableModel model = (DefaultTableModel) contacttables.getModel();

        
        return columnIndex == model.getColumnCount() - 1;
    }
}
    
    private void editbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editbuttonActionPerformed
       int selectedRow = contacttables.getSelectedRow();

if (selectedRow < 0) {
    
    JOptionPane.showMessageDialog(this, "Please select a row first.");
    return; 
}

// Proceed with retrieving data if a row is selected
String id = String.valueOf(contacttables.getValueAt(selectedRow, 0));
String fname = (String) contacttables.getValueAt(selectedRow, 1);
String mname = (String) contacttables.getValueAt(selectedRow, 2);
String lname = (String) contacttables.getValueAt(selectedRow, 3);
String nname = (String) contacttables.getValueAt(selectedRow, 4);
String pnum = (String) contacttables.getValueAt(selectedRow, 5);

// Retrieve the image if available
Icon imageIcon = contactpicture.getIcon();

// Pass the data and the image (null if not available) to the EditContact dialog or object
EditContact ud = new EditContact(id, fname, mname, lname, nname, pnum, imageIcon);
ud.setVisible(true); // Show the EditContact dialog or frame

    }//GEN-LAST:event_editbuttonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addcontact;
    private javax.swing.JLabel bgpic;
    private javax.swing.JLabel contactnumberlabel;
    private javax.swing.JLabel contactpicture;
    private javax.swing.JScrollPane contactslisttable;
    private javax.swing.JTable contacttables;
    private javax.swing.JLabel defaultpic;
    private javax.swing.JButton deletecontact;
    private javax.swing.JButton editbutton;
    private javax.swing.JLabel fnameinfo;
    private javax.swing.JLabel fnamelabel;
    private javax.swing.JLabel hiddenid;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lnameinfo;
    private javax.swing.JLabel lnamelabel;
    private javax.swing.JLabel mnameinfo;
    private javax.swing.JLabel mnamelabel;
    private javax.swing.JLabel nnameinfo;
    private javax.swing.JLabel phonebooklogo;
    private javax.swing.JLabel pnuminfo;
    private javax.swing.JButton refreshbutton;
    private javax.swing.JTextField searchbar;
    private javax.swing.JButton searchbutton;
    private javax.swing.JLabel searchlabel;
    private javax.swing.JComboBox<String> searchoptions;
    private javax.swing.JComboBox<String> sortbycombo;
    // End of variables declaration//GEN-END:variables

    void FetchDashboard() {
    Connect();
    try {
        // Updated query to exclude the dateandtimeadded field from the table
        String sql = "SELECT id, fname, mname, lname, nname, pnum, img FROM userinfo";  // Remove dateandtimeadded
        pst = con.prepareStatement(sql);
        rs = pst.executeQuery();

        DefaultTableModel tblModel = (DefaultTableModel) contacttables.getModel();
        tblModel.setRowCount(0); // Clear existing rows

        // Fetch data from the result set
        while (rs.next()) {
            String contactid = rs.getString("id");
            String contactfname = rs.getString("fname");
            String contactmname = rs.getString("mname");
            String contactlname = rs.getString("lname");
            String contactnname = rs.getString("nname");
            String contactnum = rs.getString("pnum");

            // Add data to the table row without the dateandtimeadded column
            Object[] rowData = {
                contactid,
                contactfname,
                contactmname,
                contactlname,
                contactnname,
                contactnum  // Only show the phone number
            };
            tblModel.addRow(rowData);
        }
    } catch (SQLException ex) {
        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
    } finally {
        try {
            if (con != null) {
                con.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
}


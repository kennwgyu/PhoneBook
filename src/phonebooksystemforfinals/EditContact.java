/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package phonebooksystemforfinals;

import com.mysql.jdbc.Connection;
import java.awt.Image;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class EditContact extends javax.swing.JFrame {

    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    private String selectedImagePath = null;
    
    public EditContact() {
        initComponents();
        Connect();
    }

    EditContact(String id, String fname, String mname, String lname, String nname, String pnum, Icon imageIcon) {
        initComponents();
        hiddenid.setText(String.valueOf(id));
        fnameadd.setText(fname);
        mnameadd.setText(mname);
        lnameadd.setText(lname);
        nnameadd.setText(nname);
        numadd.setText(pnum);
        imglabel.setIcon(imageIcon);
        
         if (imageIcon != null) {
        Image scaledImage = ((ImageIcon) imageIcon).getImage().getScaledInstance(
                imglabel.getWidth(), 
                imglabel.getHeight(), 
                Image.SCALE_SMOOTH
        );
        imglabel.setIcon(new ImageIcon(scaledImage));
    } else {
        imglabel.setText("No Image Available");
    }
    }
    
public void Connect()
{
     try {
        Class.forName("com.mysql.jdbc.Driver");
        con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/phone_book_system", "root", "");
        System.out.println("Connected to the database successfully.");
    } catch (ClassNotFoundException ex) {
        System.err.println("JDBC Driver not found: " + ex.getMessage());
    } catch (SQLException ex) {
        System.err.println("SQL Exception: " + ex.getMessage());
    }
}

    

    

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        numadd = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fnameadd = new javax.swing.JTextField();
        mnameadd = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lnameadd = new javax.swing.JTextField();
        nnameadd = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        imglabel = new javax.swing.JLabel();
        uploadimgbtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        editbtn = new javax.swing.JButton();
        hiddenid = new javax.swing.JLabel();
        removepicture = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        bgpicaddcont = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(650, 370));
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("Number");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, 40));

        numadd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        numadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numaddActionPerformed(evt);
            }
        });
        getContentPane().add(numadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 280, 40));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setText("First Name");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, 40));

        fnameadd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        getContentPane().add(fnameadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, 280, 40));

        mnameadd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        getContentPane().add(mnameadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 210, 280, 40));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Middle Name");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, 40));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Last Name");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, -1, 40));

        lnameadd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        getContentPane().add(lnameadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 260, 280, 40));

        nnameadd.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        getContentPane().add(nnameadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 310, 280, 40));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setText("Nickname");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, -1, 40));

        imglabel.setForeground(new java.awt.Color(255, 255, 255));
        imglabel.setText("       No Photo Uploaded");
        imglabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        getContentPane().add(imglabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 20, 150, 190));

        uploadimgbtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        uploadimgbtn.setText("Upload Image");
        uploadimgbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadimgbtnActionPerformed(evt);
            }
        });
        getContentPane().add(uploadimgbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 220, 150, 20));

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 310, 70, -1));

        editbtn.setText("Edit");
        editbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editbtnActionPerformed(evt);
            }
        });
        getContentPane().add(editbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 310, 70, -1));
        getContentPane().add(hiddenid, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 140, 30));

        removepicture.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        removepicture.setText("Remove Picture");
        removepicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removepictureActionPerformed(evt);
            }
        });
        getContentPane().add(removepicture, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 250, 150, 20));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel7.setText("Edit Contact");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, 40));

        bgpicaddcont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/backpicaddconts.png"))); // NOI18N
        getContentPane().add(bgpicaddcont, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 630, 350));

        jPanel1.setBackground(java.awt.SystemColor.windowBorder);
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 650, 370));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void uploadimgbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadimgbtnActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select an Image");
        chooser.setAcceptAllFileFilterUsed(false);

        
        javax.swing.filechooser.FileNameExtensionFilter filter = new javax.swing.filechooser.FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png", "gif");
        chooser.addChoosableFileFilter(filter);

        int result = chooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            java.io.File selectedFile = chooser.getSelectedFile();
            selectedImagePath = selectedFile.getAbsolutePath(); 

            
            javax.swing.ImageIcon imageIcon = new javax.swing.ImageIcon(selectedImagePath);
            java.awt.Image image = imageIcon.getImage().getScaledInstance(imglabel.getWidth(), imglabel.getHeight(), java.awt.Image.SCALE_SMOOTH);
            imglabel.setIcon(new javax.swing.ImageIcon(image));
        } else if (result == JFileChooser.CANCEL_OPTION) {
            JOptionPane.showMessageDialog(this, "No file selected.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_uploadimgbtnActionPerformed

    private void clearAllFields() {
    numadd.setText("");
    fnameadd.setText("");
    mnameadd.setText("");
    lnameadd.setText("");
    nnameadd.setText("");
}
    
    private void editbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editbtnActionPerformed
    String id = hiddenid.getText();
    String fname = fnameadd.getText();
    String mname = mnameadd.getText();
    String lname = lnameadd.getText();
    String nname = nnameadd.getText();
    String num = numadd.getText();
    
    // Check image path and handle it
    String imagePath = selectedImagePath;
    byte[] imageBytes = null;

    if (imagePath != null) {
        try {
            java.nio.file.Path path = java.nio.file.Paths.get(imagePath);
            imageBytes = java.nio.file.Files.readAllBytes(path);
        } catch (java.io.IOException ex) {
            Logger.getLogger(EditContact.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error reading the image file.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }
    
    // Validate field lengths
    if (fname.length() > 30) {
        JOptionPane.showMessageDialog(this, "First Name: Max 30 characters allowed.", "Input Error", JOptionPane.WARNING_MESSAGE);
        return;
    }
    if (mname.length() > 30) {
        JOptionPane.showMessageDialog(this, "Middle Name: Max 30 characters allowed.", "Input Error", JOptionPane.WARNING_MESSAGE);
        return;
    }
    if (lname.length() > 30) {
        JOptionPane.showMessageDialog(this, "Last Name: Max 30 characters allowed.", "Input Error", JOptionPane.WARNING_MESSAGE);
        return;
    }
    if (nname.length() > 30) {
        JOptionPane.showMessageDialog(this, "Nickname: Max 30 characters allowed.", "Input Error", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    // Validate phone number format (only digits, +, -, *, /)
    if (!num.matches("[0-9+\\-*/]*")) {
        JOptionPane.showMessageDialog(this, "Phone number contains invalid characters. Only digits and '+', '-', '*', '/' are allowed.", "Input Error", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    if (num.length() > 30) {
        JOptionPane.showMessageDialog(this, "Phone Number: Max 30 characters allowed.", "Input Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // SQL Query to update contact
    String updateInfoQuery = "UPDATE userinfo SET fname = ?, mname = ?, lname = ?, nname = ?, pnum = ?, img = ? WHERE id = ?";

    try {
        // Database connection and statement preparation
        Connect();
        PreparedStatement updateInfoStmt = con.prepareStatement(updateInfoQuery);
        updateInfoStmt.setString(1, fname);
        updateInfoStmt.setString(2, mname);
        updateInfoStmt.setString(3, lname);
        updateInfoStmt.setString(4, nname);
        updateInfoStmt.setString(5, num);

        // If an image was selected, add it to the database; else, set null for the image
        if (imageBytes != null) {
            updateInfoStmt.setBytes(6, imageBytes);
        } else {
            updateInfoStmt.setNull(6, java.sql.Types.BLOB);
        }

        updateInfoStmt.setString(7, id);

        // Execute the update query
        int rowsAffected = updateInfoStmt.executeUpdate();

        // Handle success/failure of the update operation
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Contact updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update the contact. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        Logger.getLogger(EditContact.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error while updating the contact: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_editbtnActionPerformed
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void removepictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removepictureActionPerformed
        int response = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to remove the picture?",
            "Confirm Removal",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );

        if (response == JOptionPane.YES_OPTION) {
            imglabel.setIcon(null);
            selectedImagePath = null;

            JOptionPane.showMessageDialog(this, "Picture removed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_removepictureActionPerformed

    private void numaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numaddActionPerformed
       String input = numadd.getText().trim();

    // Regular expression to allow numbers and +, -, *, /
    String regex = "^[0-9+\\-*/]*$";

    // Check if the input matches the regex pattern
    if (input.matches(regex)) {
        // If input is valid, proceed with your logic (e.g., storing, processing the input)
        System.out.println("Valid input: " + input);
        // You can add further processing here like storing or updating a result, etc.

    } else {
        // If input is invalid, show an error message
        JOptionPane.showMessageDialog(this, "Invalid input! Only numbers and +, -, *, / are allowed.", "Error", JOptionPane.ERROR_MESSAGE);
        numadd.setText(""); // Optionally clear the input field
    }
    }//GEN-LAST:event_numaddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditContact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditContact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditContact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditContact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditContact().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bgpicaddcont;
    private javax.swing.JButton editbtn;
    private javax.swing.JTextField fnameadd;
    private javax.swing.JLabel hiddenid;
    private javax.swing.JLabel imglabel;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField lnameadd;
    private javax.swing.JTextField mnameadd;
    private javax.swing.JTextField nnameadd;
    private javax.swing.JTextField numadd;
    private javax.swing.JButton removepicture;
    private javax.swing.JButton uploadimgbtn;
    // End of variables declaration//GEN-END:variables
}
